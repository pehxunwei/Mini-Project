@model Mini_Project.Models.Account

@{
    ViewBag.Title = "Edit";
}

@{
    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
    {
        Text = "Single",
        Value = "Single"
    });
    listItems.Add(new SelectListItem
    {
        Text = "Married",
        Value = "Married"
    });
    listItems.Add(new SelectListItem
    {
        Text = "In a relationship",
        Value = "In a relationship"
    });
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="custom-checkphonenumber" style="margin-bottom: 230px;">
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @*@Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align:justify;">User Name</span>
                <div class="col-md-10 edit-display">
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="overflow:unset">
                @*@Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align: justify;">Phone Number</span>
                <div class="col-md-10 edit-display">
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control custom-form-reg", @style = "padding-right: 60px;" } })
                    <span id="valid-msg" class="hide">✓ Valid</span>
                    <span id="error-msg" class="hide"></span>
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align: justify;">First Name</span>
                <div class="col-md-10 edit-display">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align: justify;">First Name</span>
                <div class="col-md-10 edit-display">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align: justify;">Birthday</span>
                <div class="col-md-10 edit-display">
                    @Html.EditorFor(model => model.Birthday, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })


                    @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2 custom-form-reg" })*@
                <span class="control-label custom-reg col-md-2" style="width:30%; text-align: justify;">Gender</span>
                @*<div class="col-md-10" style="width: 320px;">
            <span class="custom-gender">MALE</span>
            @Html.RadioButtonFor(model => model.Gender, "Male")
            <span class="custom-gender">FEMALE</span>
            @Html.RadioButtonFor(model => model.Gender, "Female")
        </div>*@
            <div class="col-md-10 edit-display">
                <div class="form-control text-box single-line custom-form-reg" style="padding-bottom:20px; text-align: center;">
                    <div class="custom-container">
                        <span class="custom-gender">MALE</span>
                        @Html.RadioButtonFor(model => model.Gender, "Male")
                    </div>
                    <div class="custom-container">
                        <span class="custom-gender">FEMALE</span>
                        @Html.RadioButtonFor(model => model.Gender, "Female")
                    </div>
                </div>
            </div>
            </div>

            <div class="form-group" style="text-align: center; padding-top: 30px;">
                <div class="col-md-10" style="margin-left: 10%;">
                    <input type="submit" name="submit" id="submit" class="form-submit" value="Save" style="width: 40%;" />
                    <input type="button" value="Cancel" class="form-submit" onclick="document.location.href = '@Url.Action("Manage")'" style="width: 40%; margin-left:inherit;" />
                </div>
            </div>

        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/node_modules/intl-tel-input/build/js/intlTelInput.min.js?1567329555819"></script>
    <script src="~/node_modules/intl-tel-input/examples/js/prism.js"></script>
    <script>
        var input = document.querySelector("#PhoneNumber"),
            errorMsg = document.querySelector("#error-msg"),
            validMsg = document.querySelector("#valid-msg");

        // here, the index maps to the error code returned from getValidationError - see readme
        var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        // initialise plugin
        var iti = window.intlTelInput(input, {
            initialCountry: 'sg',
            nationalMode: true,
            hiddenInput: "PhoneNumber_full",
            utilsScript: "../../build/js/utils.js?1567329555819"
        });

        var reset = function () {
            input.classList.remove("error");
            errorMsg.innerHTML = "";
            errorMsg.classList.add("hide");
            validMsg.classList.add("hide");
        };

        // on blur: validate
        input.addEventListener('blur', function () {
            reset();
            if (input.value.trim()) {
                if (iti.isValidNumber()) {
                    validMsg.classList.remove("hide");
                } else {
                    input.classList.add("error");
                    var errorCode = iti.getValidationError();
                    errorMsg.innerHTML = errorMap[errorCode];
                    errorMsg.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input.addEventListener('change', reset);
        input.addEventListener('keyup', reset);
    </script>
    <script class="iti-load-utils" async src="~/node_modules/intl-tel-input/build/js/utils.js?1567329555819"></script>
}
