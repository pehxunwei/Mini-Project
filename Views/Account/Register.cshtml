@model Mini_Project.Models.Account

@{
    ViewBag.Title = "Register";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="main">

        <section class="signup">
            <!-- <img src="images/signup-bg.jpg" alt=""> -->
            <div class="container">
                <div class="custom-signup-content">
                    <form method="POST" id="signup-form" class="signup-form">
                        <h2 class="form-title" style="color: #ffffff; font-weight: 300;">Create account</h2>

                        <div class="custom-row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">USER NAME</span>
                                    @*<input type="text" class="form-input" name="name" id="name" placeholder="Your Name" />*@
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control custom-form-reg", @placeholder = "xyz@gmail.com" } })
                                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger custom-validation" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">PASSWORD</span>
                                    <i class="fa fa-eye" id="eye" onclick="myFunction()"></i>
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="custom-row">
                            @*<div class="col-md-6">
                                    <div class="form-group">
                                        <span class="control-label custom-reg">REPEAT YOUR PASSWORD</span>
                                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                            <div class="col-md-6">
                                <div class="form-group" style="overflow: unset;">
                                    <span class="control-label custom-reg">PHONE NUMBER</span>
                                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                                    <span id="valid-msg" class="hide">✓ Valid</span>
                                    <span id="error-msg" class="hide"></span>
                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg" style="text-align: justify; font-size: 12px; color:#D3D3D3;">Your password should be 8-16 characters long, with a mixture of upper and lower case characters, numbers and symbols.</span>
                                </div>
                            </div>



                        </div>

                        <div class="custom-row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">FIRST NAME</span>
                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">LAST NAME</span>
                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control custom-form-reg" } })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>




                        <div class="custom-row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">DATE OF BIRTH</span>

                                    @Html.EditorFor(model => model.Birthday, "{0:dd/MM/yyyy}", new { htmlAttributes = new { @class = "form-control custom-form-reg datePicker", @type = "date" } })
                                    @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <span class="control-label custom-reg">GENDER</span>
                                    <div class="form-control" style="padding-bottom:20px; text-align: center;">
                                        <div class="custom-container">
                                            <span class="custom-gender">MALE</span>
                                            @Html.RadioButtonFor(model => model.Gender, "Male")
                                        </div>
                                        <div class="custom-container">
                                            <span class="custom-gender">FEMALE</span>
                                            @Html.RadioButtonFor(model => model.Gender, "Female")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        @*<div class="form-group">
                                <input type="checkbox" name="agree-term" id="agree-term" class="agree-term" />
                                <label for="agree-term" class="label-agree-term"><span><span></span></span>I agree all statements in  <a href="#" class="term-service">Terms of service</a></label>
                            </div>*@
                        <div class="form-group" style="text-align: center; padding-top: 40px;">
                            <input type="submit" name="submit" id="submit" class="form-submit" value="Sign up"/>
                        </div>
                    </form>
                    <p class="loginhere">
                        Already have an account? @Html.ActionLink("Login here", "LogIn", "Account", htmlAttributes: new { @class = "loginhere-link" })
                    </p>
                </div>
            </div>
        </section>

    </div>
}




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap")

    <script>
        function myFunction() {
            var x = document.getElementById("Password");
            var icon = document.querySelector(".fa")
            if (x.type === "password") {
                x.type = "text";
                icon.style.color = "#74ebd5";
            } else {
                x.type = "password";
                icon.style.color = "#9face6";
            }
        }
    </script>
    <script src="~/node_modules/intl-tel-input/build/js/intlTelInput.min.js?1567329555819"></script>
    <script src="~/node_modules/intl-tel-input/examples/js/prism.js"></script>
    <script>
        var input = document.querySelector("#PhoneNumber"),
            errorMsg = document.querySelector("#error-msg"),
            validMsg = document.querySelector("#valid-msg");

        // here, the index maps to the error code returned from getValidationError - see readme
        var errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];

        // initialise plugin
        var iti = window.intlTelInput(input, {
            initialCountry: 'sg',
            nationalMode: true,
            hiddenInput: "PhoneNumber_full",
            utilsScript: "../../build/js/utils.js?1567329555819"
        });

        var reset = function () {
            input.classList.remove("error");
            errorMsg.innerHTML = "";
            errorMsg.classList.add("hide");
            validMsg.classList.add("hide");
        };

        // on blur: validate
        input.addEventListener('blur', function () {
            reset();
            if (input.value.trim()) {
                if (iti.isValidNumber()) {
                    validMsg.classList.remove("hide");
                } else {
                    input.classList.add("error");
                    var errorCode = iti.getValidationError();
                    errorMsg.innerHTML = errorMap[errorCode];
                    errorMsg.classList.remove("hide");
                }
            }
        });

        // on keyup / change flag: reset
        input.addEventListener('change', reset);
        input.addEventListener('keyup', reset);
    </script>
    <script class="iti-load-utils" async src="~/node_modules/intl-tel-input/build/js/utils.js?1567329555819"></script>
    <script src="~/Scripts/moment.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.js"></script>
}

